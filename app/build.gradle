apply plugin: 'com.android.library'
apply plugin: "maven"
//插件
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
android {
    signingConfigs {
        config {
            keyAlias 'wall'
            keyPassword '123456'
            storeFile file('F:/TestDemo/app/test_waller.jks')
            storePassword '123456'
            v2SigningEnabled true
        }
    }
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        flavorDimensions "versionCode"
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

}
group="com.ulink.kmutil"
version = "1.0.3"
def siteUrl = 'https://github.com/wachajson/ckutil'    // project homepage
def gitUrl = 'https://github.com/wachajson/ckutil.git' // project git
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('D:\\Program Files\\Apache\\maven-repository'))
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //walle
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.0.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.0.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    //    compile project(':CallKit')
    implementation 'com.google.android.gms:play-services-ads:17.1.2'
}

def getProductName(){
    return "kmutil"
}

android.libraryVariants.all { variant ->
    variant.outputs.all {
        outputFileName = getProductName() + ".aar"
    }

}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    pkg {
        repo = 'maven'//自己创建的仓库名字，要跟Bintray上创建的仓库一样
        name = 'kmutil'//上传到JCenter的名字,最终引用的名字
        websiteUrl = siteUrl
        vcsUrl = gitUrl //这个好像是必须的，我尝试过传空字符串好像是不成功的
        licenses = ['MIT']//不能随便写，只能是仓库创建时选择的license type
//        userOrg = 'mumusalibrary' //自己创建的organization名称
        publish = true // 是否是公开项目，公开别人可以引用

        version {
            name = '1.0.0'//版本名，上面好像已经有配置了
            desc = 'kmutil library.'//描述，自己定义
            released  = new Date()
            vcsTag = 'v1.0.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
    configurations = ['archives']
}


install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name 'Kmutil'//项目名
                description 'Kmutil library.'//项目描述
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0' //和之前自己定义的协议一致
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chekikivan'        //填写bintray或者github的用户名，这里我填的是我的github名
                        name 'chekikivan'         //姓名，这里我填的是Bintray上的昵称
                        email '747692815w@gmail.com'//邮箱
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false //必须添加以免出错
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}





